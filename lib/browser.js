// Generated by IcedCoffeeScript 1.6.2a
(function() {
  var BrowserBuffer, base, encode_byte, first_non_ascii, pow2, rshift, twos_compl, twos_compl_inv, uri_encode_chunk, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _ref = require('./util'), pow2 = _ref.pow2, rshift = _ref.rshift, twos_compl_inv = _ref.twos_compl_inv, twos_compl = _ref.twos_compl;

  base = require('./base');

  exports.PpBuffer = BrowserBuffer = (function(_super) {
    __extends(BrowserBuffer, _super);

    function BrowserBuffer() {
      BrowserBuffer.__super__.constructor.call(this);
      this._buffers = [];
      this._sz = 0x1000;
      this._logsz = 12;
      this._push_new_buffer();
      this._i = 0;
      this._b = 0;
      this._no_push = false;
      this._e = [];
    }

    BrowserBuffer.prototype._push_new_buffer = function() {
      var nb;
      this._b = this._buffers.length;
      this._i = 0;
      nb = new Uint8Array(this._sz);
      this._buffers.push(nb);
      return nb;
    };

    BrowserBuffer.prototype._left_in_buffer = function() {
      return this._sz - this._i;
    };

    BrowserBuffer.decode = function(s, enc) {
      return base.PpBuffer._decode(BrowserBuffer, s, enc);
    };

    BrowserBuffer.prototype.push_uint8 = function(b) {
      var buf;
      if (this._no_push) {
        throw new Error("Cannot push anymore into this buffer");
      }
      buf = this._buffers[this._b];
      if (this._i === this._sz) {
        buf = this._push_new_buffer();
      }
      buf[this._i++] = b;
      return this._tot++;
    };

    BrowserBuffer.prototype.push_int8 = function(b) {
      return this.push_uint8(b);
    };

    BrowserBuffer.prototype.push_int16 = function(i) {
      return this.push_uint16(twos_compl(i, 16));
    };

    BrowserBuffer.prototype.push_int32 = function(i) {
      return this.push_uint32(twos_compl(i, 32));
    };

    BrowserBuffer.prototype.push_float32 = function(val) {
      var dv, tmp;
      tmp = new Uint8Array(4);
      dv = new DataView(tmp);
      dv.setFloat32(0, val, false);
      return this.push_buffer(tmp);
    };

    BrowserBuffer.prototype.push_float64 = function(val) {
      var dv, tmp;
      tmp = new Uint8Array(8);
      dv = new DataView(tmp);
      dv.setFloat64(0, val, false);
      return this.push_buffer(tmp);
    };

    BrowserBuffer.prototype.push_uint16 = function(i) {
      this.push_uint8((i >> 8) & 0xff);
      return this.push_uint8(i & 0xff);
    };

    BrowserBuffer.prototype.push_uint32 = function(i) {
      this.push_uint8((i >> 24) & 0xff);
      this.push_uint8((i >> 16) & 0xff);
      this.push_uint8((i >> 8) & 0xff);
      return this.push_uint8(i & 0xff);
    };

    BrowserBuffer.prototype.push_raw_bytes = function(s) {
      var a, i, _i, _ref1;
      a = new Uint8Array(s.length);
      for (i = _i = 0, _ref1 = s.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        a[i] = s.charCodeAt(i);
      }
      return this.push_buffer(a);
    };

    BrowserBuffer.prototype.push_buffer = function(input) {
      var bp, ep, lib, n, slab;
      bp = 0;
      ep = input.length;
      while (bp < ep) {
        lib = this._left_in_buffer();
        if (lib === 0) {
          slab = this._push_new_buffer();
          lib = this._left_in_buffer();
        } else {
          slab = this._buffers[this._b];
        }
        n = Math.min(lib, ep - bp);
        slab.set(input.subarray(bp, bp + n), this._i);
        this._i += n;
        this._tot += n;
        bp += n;
      }
      return this;
    };

    BrowserBuffer.prototype._zero_pad = function(n) {
      var j, _i, _results;
      if (n != null) {
        _results = [];
        for (j = _i = 0; 0 <= n ? _i < n : _i > n; j = 0 <= n ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      } else {
        return 0;
      }
    };

    BrowserBuffer.prototype._get = function(i, n) {
      var bi, li, lim, ret;
      if (n == null) {
        n = null;
      }
      ret = i >= this._tot ? this._zero_pad(n) : (bi = this._logsz ? i >>> this._logsz : 0, li = i % this._sz, lim = bi === this._b ? this._i : this._sz, ret = bi > this._b || li >= lim ? this._zero_pad(n) : n == null ? this._buffers[bi][li] : (n = Math.min(lim - li, n), this._buffers[bi].subarray(li, li + n)));
      return ret;
    };

    BrowserBuffer.prototype.ui8a_decode = function(v) {
      this._buffers = [v];
      this._logsz = 0;
      this._tot = this._sz = this._i = v.length;
      this._no_push = true;
      return this;
    };

    BrowserBuffer.prototype.read_uint8 = function() {
      return this._get(this._cp++);
    };

    BrowserBuffer.prototype.read_uint16 = function() {
      return (this.read_uint8() << 8) | this.read_uint8();
    };

    BrowserBuffer.prototype.read_uint32 = function() {
      return (this.read_uint8() * pow2(24)) + ((this.read_uint8() << 16) | (this.read_uint8() << 8) | this.read_uint8());
    };

    BrowserBuffer.prototype.read_int8 = function() {
      return twos_compl_inv(this.read_uint8(), 8);
    };

    BrowserBuffer.prototype.read_int16 = function() {
      return twos_compl_inv(this.read_uint16(), 16);
    };

    BrowserBuffer.prototype.read_int32 = function() {
      return twos_compl_inv(this.read_uint32(), 32);
    };

    BrowserBuffer.prototype.read_float64 = function() {
      var a, dv;
      a = this.read_byte_array(8);
      dv = new DataView(a);
      return dv.getFloat64(0, false);
    };

    BrowserBuffer.prototype.read_float32 = function() {
      var a, dv;
      a = this.read_byte_array(4);
      dv = new DataView(a);
      return dv.getFloat32(0, false);
    };

    BrowserBuffer.prototype.read_chunk = function(n) {
      var ret;
      ret = this._get(this._cp, n);
      this._cp += ret.length;
      return ret;
    };

    BrowserBuffer.prototype.read_byte_array = function(n) {
      var chnk, i, ret;
      i = 0;
      ret = null;
      n = this.prep_byte_grab(n);
      chnk = this.read_chunk(n);
      if (chnk.length === n) {
        ret = chnk;
      } else {
        ret = new Uint8Array(n);
        ret.set(chnk, 0);
        i = chnk.length;
        while (i < n) {
          chnk = this.read_chunk(n - i);
          ret.set(chnk, i);
          i += chnk.length;
        }
      }
      return ret;
    };

    BrowserBuffer.prototype.prep_byte_grab = function(n) {
      var bl;
      bl = this.bytes_left();
      if (n > bl) {
        this._e.push("Corruption: asked for " + n + " bytes, but only " + bl + " available");
        n = bl;
      }
      return n;
    };

    BrowserBuffer.prototype.read_utf8_string = function(n) {
      var chnk, chnksz, e, i, ret, s, tmp;
      i = 0;
      n = this.prep_byte_grab(n);
      chnksz = 0x400;
      tmp = (function() {
        var _results;
        _results = [];
        while (i < n) {
          s = Math.min(n - i, chnksz);
          chnk = this.read_chunk(s);
          i += chnk.length;
          _results.push(uri_encode_chunk(chnk));
        }
        return _results;
      }).call(this);
      try {
        ret = decodeURIComponent(tmp.join(''));
      } catch (_error) {
        e = _error;
        this._e.push("Invalid UTF-8 sequence");
        ret = "";
      }
      return ret;
    };

    BrowserBuffer.utf8_to_ui8a = function(s) {
      var c, i, n, ret, rp;
      s = encodeURIComponent(s);
      n = s.length;
      ret = new Uint8Array(s.length);
      rp = 0;
      i = 0;
      while (i < n) {
        c = s[i];
        if (c === '%') {
          c = parseInt(s.slice(i + 1, +(i + 2) + 1 || 9e9), 16);
          i += 3;
        } else {
          c = c.charCodeAt(0);
          i++;
        }
        ret[rp++] = c;
      }
      return ret.subarray(0, rp);
    };

    BrowserBuffer.ui8a_to_binary = function(b) {
      var chnksz, i, n, parts, s;
      chnksz = 0x100;
      n = b.length;
      i = 0;
      parts = [];
      while (i < n) {
        s = Math.min(n - i, chnksz);
        parts.push(String.fromCharCode.apply(String, b.subarray(i, i + s)));
        i += n;
      }
      return parts.join('');
    };

    BrowserBuffer.to_byte_array = function(b) {
      if (base.is_uint8_array(b)) {
        return b;
      } else {
        return null;
      }
    };

    BrowserBuffer.type = function() {
      return 'browser';
    };

    return BrowserBuffer;

  })(base.PpBuffer);

  first_non_ascii = function(chunk, start, end) {
    var i, _i;
    for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
      if (chunk[i] >= 0x80 || chunk[i] === 0x25) {
        return i;
      }
    }
    return end;
  };

  encode_byte = function(b) {
    var lb, ub;
    ub = ((b >>> 4) & 0xf).toString(16);
    lb = (b & 0xf).toString(16);
    return "%" + ub + lb;
  };

  uri_encode_chunk = function(chunk) {
    var fna, i, n, out, parts, sa;
    n = chunk.length;
    i = 0;
    parts = (function() {
      var _results;
      _results = [];
      while (i < n) {
        fna = first_non_ascii(chunk, i, n);
        if (fna > i) {
          sa = chunk.subarray(i, fna);
          i = fna;
          _results.push(String.fromCharCode.apply(String, sa));
        } else {
          _results.push(encode_byte(chunk[i++]));
        }
      }
      return _results;
    })();
    out = parts.join('');
    return out;
  };

}).call(this);
