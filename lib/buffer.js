// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var Buffer, CharMap, encode_byte, encode_chunk, first_non_ascii, pow2, rshift, _ref;

  _ref = require('./util'), pow2 = _ref.pow2, rshift = _ref.rshift;

  CharMap = (function() {

    function CharMap(s, pad) {
      var c, i, _i, _j, _len, _len1;
      if (pad == null) pad = "";
      this.fwd = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = s.length; _i < _len; _i++) {
          c = s[_i];
          _results.push(c);
        }
        return _results;
      })();
      this.rev = {};
      for (i = _i = 0, _len = s.length; _i < _len; i = ++_i) {
        c = s[i];
        this.rev[c] = i;
      }
      for (_j = 0, _len1 = pad.length; _j < _len1; _j++) {
        c = pad[_j];
        this.rev[c] = 0;
      }
    }

    return CharMap;

  })();

  exports.Buffer = Buffer = (function() {

    Buffer.prototype.B16 = new CharMap("0123456789abcdef");

    Buffer.prototype.B32 = new CharMap("abcdefghijkmnpqrstuvwxyz23456789");

    Buffer.prototype.B64 = new CharMap("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "=");

    Buffer.prototype.B64X = new CharMap("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@_", "=");

    Buffer.prototype.B64A = new CharMap("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-", "=");

    function Buffer() {
      this._buffers = [];
      this._sz = 0x1000;
      this._logsz = 12;
      this._push_new_buffer();
      this._i = 0;
      this._b = 0;
      this._cp = 0;
      this._tot = 0;
      this._no_push = false;
      this._e = [];
    }

    Buffer.prototype.get_errors = function() {
      if (this._e.length) {
        return this._e;
      } else {
        return null;
      }
    };

    Buffer.prototype._push_new_buffer = function() {
      var nb;
      this._b = this._buffers.length;
      this._i = 0;
      nb = new Uint8Array(this._sz);
      this._buffers.push(nb);
      return nb;
    };

    Buffer.prototype._left_in_buffer = function() {
      return this._sz - this._i;
    };

    Buffer.prototype.push_byte = function(b) {
      var buf;
      if (this._no_push) throw new Error("Cannot push anymore into this buffer");
      buf = this._buffers[this._b];
      if (this._i === this._sz) buf = this._push_new_buffer();
      buf[this._i++] = b;
      return this._tot++;
    };

    Buffer.prototype.push_short = function(s) {
      return this.push_ibytes(s, 1);
    };

    Buffer.prototype.push_int = function(i) {
      return this.push_ibytes(i, 3);
    };

    Buffer.prototype.push_raw_bytes = function(s) {
      var a, i, _i, _ref1;
      a = new Uint8Array(s.length);
      for (i = _i = 0, _ref1 = s.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        a[i] = s.charCodeAt(i);
      }
      return this.push_buffer(a);
    };

    Buffer.prototype.push_buffer = function(input) {
      var bp, ep, lib, n, slab;
      bp = 0;
      ep = input.length;
      while (bp < ep) {
        lib = this._left_in_buffer();
        if (lib === 0) {
          slab = this._push_new_buffer();
          lib = this._left_in_buffer();
        } else {
          slab = this._buffers[this._b];
        }
        n = Math.min(lib, ep - bp);
        slab.set(input.subarray(bp, bp + n), this._i);
        this._i += n;
        this._tot += n;
        bp += n;
      }
      return this;
    };

    Buffer.prototype.push_utf8_codepoint = function(c) {
      if (c >= 0x10000) {
        this.push_byte(0xf0 | ((c & 0x1c0000) >>> 18));
        this.push_byte(0x80 | ((c & 0x3f000) >> 12));
        this.push_byte(0x80 | ((c & 0xfc0) >>> 6));
        return this.push_byte(0x80 | (c & 0x3f));
      } else if (c >= 0x800) {
        this.push_byte(0xe0 | ((c & 0xf000) >>> 12));
        this.push_byte(0x80 | ((c & 0xfc0) >> 6));
        return this.push_byte(0x80 | (c & 0x3f));
      } else if (c >= 0x80) {
        this.push_byte(0xc0 | ((c & 0x7c0) >>> 6));
        return this.push_byte(0x80 | (c & 0x3f));
      } else {
        return this.push_byte(c);
      }
    };

    Buffer.prototype.push_utf8_string = function(s) {
      var cc, i, _i, _ref1;
      for (i = _i = 0, _ref1 = s.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        cc = s.charCodeAt(i);
        this.push_utf8_codepoint(cc);
      }
      return this;
    };

    Buffer.prototype.push_ibytes = function(b, n) {
      var i, _i, _results;
      _results = [];
      for (i = _i = n; n <= 0 ? _i <= 0 : _i >= 0; i = n <= 0 ? ++_i : --_i) {
        _results.push(this.push_byte((b >> (i * 8)) & 0xff));
      }
      return _results;
    };

    Buffer.prototype.toString = function(enc) {
      if (enc == null) enc = 'base64';
      switch (enc) {
        case 'base64':
          return this.base64_encode();
        case 'base64a':
          return this.base64a_encode();
        case 'base64x':
          return this.base64x_encode();
        case 'base32':
          return this.base32_encode();
        case 'hex':
          return this.base16_encode();
        case 'binary':
          return this.binary_encode();
        case 'ui8a':
          return this.ui8a_encode();
      }
    };

    Buffer.prototype.encode = function(e) {
      return this.toString(e);
    };

    Buffer.prototype.bytes_left = function() {
      return this._tot - this._cp;
    };

    Buffer.prototype._get = function(i, n) {
      var bi, c, j, li, lim, ret, zero_pad;
      if (n == null) n = null;
      zero_pad = n != null ? (function() {
        var _i, _results;
        _results = [];
        for (j = _i = 0; 0 <= n ? _i < n : _i > n; j = 0 <= n ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })() : 0;
      ret = i >= this._tot ? zero_pad : (bi = this._logsz ? i >>> this._logsz : 0, li = i % this._sz, lim = bi === this._b ? this._i : this._sz, ret = bi > this._b || li >= lim ? zero_pad : n == null ? (c = this._buffers[bi][li], c) : (n = Math.min(lim - li, n), this._buffers[bi].subarray(li, li + n)));
      return ret;
    };

    Buffer.prototype.ui8a_encode = function() {
      var hold, raw;
      hold = this._cp;
      this._cp = 0;
      raw = this.consume_byte_array(this._tot);
      this._cp = hold;
      return raw;
    };

    Buffer.prototype.binary_encode = function() {
      var i, v;
      v = (function() {
        var _i, _ref1, _results;
        _results = [];
        for (i = _i = 0, _ref1 = this._tot; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          _results.push(this._get(i));
        }
        return _results;
      }).call(this);
      return String.fromCharCode.apply(String, v);
    };

    Buffer.prototype.base16_encode = function() {
      var c, i, tmp, _i, _ref1;
      tmp = "";
      for (i = _i = 0, _ref1 = this._tot; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        c = this._get(i);
        tmp += this.B16.fwd[c >> 4];
        tmp += this.B16.fwd[c & 0xf];
      }
      return tmp;
    };

    Buffer.prototype.base32_encode = function() {
      var b, c, l, outlen, p, _i;
      b = [];
      l = this._tot;
      outlen = Math.floor(l / 5) * 8 + [0, 2, 4, 5, 7][l % 5];
      p = 0;
      for (c = _i = 0; _i < l; c = _i += 5) {
        b[p++] = this.B32.fwd[this._get(c) >> 3];
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0x7) << 2 | this._get(++c) >> 6];
        }
        if (p < outlen) b[p++] = this.B32.fwd[this._get(c) >> 1 & 0x1f];
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0x1) << 4 | this._get(++c) >> 4];
        }
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0xf) << 1 | this._get(++c) >> 7];
        }
        if (p < outlen) b[p++] = this.B32.fwd[this._get(c) >> 2 & 0x1f];
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0x3) << 3 | this._get(++c) >> 5];
        }
        if (p < outlen) b[p++] = this.B32.fwd[this._get(c) & 0x1f];
      }
      return b.slice(0, outlen).join('');
    };

    Buffer.prototype.base64_encode = function() {
      return this._base64_encode(this.B64);
    };

    Buffer.prototype.base64a_encode = function() {
      return this._base64_encode(this.B64A);
    };

    Buffer.prototype.base64x_encode = function() {
      return this._base64_encode(this.B64X);
    };

    Buffer.prototype._base64_encode = function(M) {
      var b, c, i, l, n, p, _i, _j;
      b = [];
      l = this._tot;
      c = l % 3;
      p = c > 0 ? (function() {
        var _i, _results;
        _results = [];
        for (i = _i = c; c <= 3 ? _i < 3 : _i > 3; i = c <= 3 ? ++_i : --_i) {
          _results.push('=');
        }
        return _results;
      })() : [];
      for (c = _i = 0; _i < l; c = _i += 3) {
        n = (this._get(c) << 16) + (this._get(c + 1) << 8) + this._get(c + 2);
        for (i = _j = 3; _j >= 0; i = --_j) {
          b.push(M.fwd[(n >>> i * 6) & 0x3f]);
        }
      }
      return (b.slice(0, b.length - p.length).concat(p)).join('');
    };

    Buffer.decode = function(s, enc) {
      switch (enc) {
        case 'binary':
          return (new Buffer).binary_decode(s);
        case 'base64':
          return (new Buffer).base64_decode(s);
        case 'base64a':
          return (new Buffer).base64a_decode(s);
        case 'base64x':
          return (new Buffer).base64x_decode(s);
        case 'base32':
          return (new Buffer).base32_decode(s);
        case 'hex':
          return (new Buffer).base16_decode(s);
        case 'ui8a':
          return (new Buffer).ui8a_decode(s);
      }
    };

    Buffer.prototype.ui8a_decode = function(v) {
      this._buffers = [v];
      this._logsz = 0;
      this._tot = this._sz = this._i = v.length;
      this._no_push = true;
      return this;
    };

    Buffer.prototype.binary_decode = function(b) {
      var i, _i, _ref1;
      for (i = _i = 0, _ref1 = b.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.push_byte(b.charCodeAt(i));
      }
      return this;
    };

    Buffer.prototype.base16_decode = function(data) {
      var c, i, last, v, _i, _len;
      if ((data.length % 2) !== 0) {
        return null;
      } else {
        last = 0;
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          c = data[i];
          if ((v = this.B16.rev[c]) == null) return null;
          if (i % 2 === 0) {
            last = v;
          } else {
            this.push_byte((last << 4) | v);
          }
        }
        return this;
      }
    };

    Buffer.prototype._base64_decode = function(data, M) {
      var c, i, npad, sum, v, _i, _j, _len;
      if ((data.length % 4) !== 0) {
        return null;
      } else {
        sum = 0;
        npad = 0;
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          c = data[i];
          if ((v = M.rev[c]) == null) return null;
          if (c === '=') npad++;
          sum = (sum << 6) | v;
          if (i % 4 === 3) {
            for (i = _j = 2; 2 <= npad ? _j <= npad : _j >= npad; i = 2 <= npad ? ++_j : --_j) {
              this.push_byte((sum >> i * 8) & 0xff);
            }
            sum = 0;
          }
        }
        return this;
      }
    };

    Buffer.prototype.base64_decode = function(data) {
      return this._base64_decode(data, this.B64);
    };

    Buffer.prototype.base64a_decode = function(data) {
      return this._base64_decode(data, this.B64A);
    };

    Buffer.prototype.base64x_decode = function(data) {
      return this._base64_decode(data, this.B64X);
    };

    Buffer.prototype.base32_decode = function(data) {
      var before, c, i, j, nmb, rem, sum, v, _i, _j, _k, _l, _len, _ref1;
      sum = 0;
      for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
        c = data[i];
        if ((v = this.B32.rev[c]) == null) return null;
        before = sum;
        sum = (sum * 32) + v;
        if (i % 8 === 7) {
          for (j = _j = 4; _j >= 0; j = --_j) {
            this.push_byte(rshift(sum, j * 8) & 0xff);
          }
          sum = 0;
        }
      }
      if ((rem = data.length % 8) !== 0) {
        for (i = _k = 8; 8 <= rem ? _k < rem : _k > rem; i = 8 <= rem ? ++_k : --_k) {
          sum *= 32;
        }
        if ((nmb = {
          2: 1,
          4: 2,
          5: 3,
          7: 4
        }[rem]) == null) {
          return null;
        }
        for (i = _l = 4, _ref1 = 4 - nmb; 4 <= _ref1 ? _l < _ref1 : _l > _ref1; i = 4 <= _ref1 ? ++_l : --_l) {
          this.push_byte(rshift(sum, i * 8) & 0xff);
        }
      }
      return this;
    };

    Buffer.prototype.consume_byte = function() {
      return this._get(this._cp++);
    };

    Buffer.prototype.consume_bytes = function(n) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        _results.push(this.consume_byte());
      }
      return _results;
    };

    Buffer.prototype.consume_chunk = function(n) {
      var ret;
      ret = this._get(this._cp, n);
      this._cp += ret.length;
      return ret;
    };

    Buffer.prototype.consume_byte_array = function(n) {
      var chnk, i, ret;
      i = 0;
      n = this.prep_byte_grab(n);
      ret = new Uint8Array(n);
      while (i < n) {
        chnk = this.consume_chunk(n - i);
        ret.set(chnk, i);
        i += chnk.length;
      }
      return ret;
    };

    Buffer.prototype.prep_byte_grab = function(n) {
      var bl;
      bl = this.bytes_left();
      if (n > bl) {
        this._e.push("Corruption: asked for " + n + " bytes, but only " + bl + " available");
        n = bl;
      }
      return n;
    };

    Buffer.prototype.consume_utf8_string = function(n) {
      var chnk, chnksz, i, ret, s, tmp;
      i = 0;
      n = this.prep_byte_grab(n);
      chnksz = 0x400;
      tmp = (function() {
        var _results;
        _results = [];
        while (i < n) {
          s = Math.min(n - i, chnksz);
          chnk = this.consume_chunk(s);
          i += chnk.length;
          _results.push(encode_chunk(chnk));
        }
        return _results;
      }).call(this);
      try {
        ret = decodeURIComponent(tmp.join(''));
      } catch (e) {
        this._e.push("Invalid UTF-8 sequence");
        ret = "";
      }
      return ret;
    };

    return Buffer;

  })();

  first_non_ascii = function(chunk, start, end) {
    var i, _i;
    for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
      if (chunk[i] >= 0x80 || chunk[i] === 0x25) return i;
    }
    return end;
  };

  encode_byte = function(b) {
    var lb, ub;
    ub = ((b >>> 4) & 0xf).toString(16);
    lb = (b & 0xf).toString(16);
    return "%" + ub + lb;
  };

  encode_chunk = function(chunk) {
    var fna, i, n, out, parts, sa;
    n = chunk.length;
    i = 0;
    parts = (function() {
      var _results;
      _results = [];
      while (i < n) {
        fna = first_non_ascii(chunk, i, n);
        if (fna > i) {
          sa = chunk.subarray(i, fna);
          i = fna;
          _results.push(String.fromCharCode.apply(String, sa));
        } else {
          _results.push(encode_byte(chunk[i++]));
        }
      }
      return _results;
    })();
    out = parts.join('');
    return out;
  };

  exports.utf8_to_ui8a = function(s) {
    var c, i, n, ret, rp;
    s = encodeURIComponent(s);
    n = s.length;
    ret = new Uint8Array(s.length);
    rp = 0;
    i = 0;
    while (i < n) {
      c = s[i];
      if (c === '%') {
        c = parseInt(s.slice(i + 1, +(i + 2) + 1 || 9e9), 16);
        i += 3;
      } else {
        c = c.charCodeAt(0);
        i++;
      }
      ret[rp++] = c;
    }
    return ret.subarray(0, rp);
  };

}).call(this);
