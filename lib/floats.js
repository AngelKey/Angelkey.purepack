// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var Browser, Converter, Node,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports.Converter = Converter = (function() {

    function Converter(_buffer) {
      this._buffer = _buffer;
    }

    Converter.prototype.pack_float32 = function(v) {
      return this._pack_float(v, 4);
    };

    Converter.prototype.pack_float64 = function(v) {
      return this._pack_float(v, 8);
    };

    Converter.prototype.consume_float32 = function() {
      return this._consume_float(4);
    };

    Converter.prototype.consume_float64 = function() {
      return this._consume_float(8);
    };

    Converter.make = function(b) {
      var klass;
      klass = (typeof DataView !== "undefined" && DataView !== null) && (typeof ArrayBuffer !== "undefined" && ArrayBuffer !== null) && (typeof Uint8Array !== "undefined" && Uint8Array !== null) ? Browser : typeof Buffer !== "undefined" && Buffer !== null ? Node : null;
      if (klass != null) {
        return new klass(b);
      } else {
        return null;
      }
    };

    return Converter;

  })();

  exports.Browser = Browser = (function(_super) {

    __extends(Browser, _super);

    function Browser() {
      return Browser.__super__.constructor.apply(this, arguments);
    }

    Browser.prototype._pack_float = function(v, n) {
      var ab, dv, ia;
      ab = new ArrayBuffer(n);
      ia = new Uint8Array(ab);
      dv = new DataView(ab);
      dv["setFloat" + (n << 3)].call(dv, 0, v, false);
      return this._buffer.push_buffer(ia);
    };

    Browser.prototype._consume_float = function(n) {
      var ab, b, dv, i, ia, _i, _len, _ref;
      ab = new ArrayBuffer(n);
      ia = new Uint8Array(ab);
      dv = new DataView(ab);
      _ref = this._buffer.consume_bytes(n);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        b = _ref[i];
        ia[i] = b;
      }
      return dv["getFloat" + (n << 3)].call(dv, 0, false);
    };

    return Browser;

  })(Converter);

  exports.Node = Node = (function(_super) {

    __extends(Node, _super);

    function Node() {
      return Node.__super__.constructor.apply(this, arguments);
    }

    Node.prototype._pack_float = function(v, n) {
      var b, f;
      b = new Buffer(n);
      f = n === 4 ? "writeFloatBE" : "writeDoubleBE";
      return b[f].call(b, v, 0);
    };

    Node.prototype._consume_float = function(n) {
      var b, f;
      b = new Buffer(this._buffer.consume_bytes(n));
      f = n === 4 ? "readFloatBE" : "readDoubleBE";
      return b[f].call(b, 0);
    };

    return Node;

  })(Converter);

}).call(this);
