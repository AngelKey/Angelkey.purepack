// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var BaseBuffer, NodeBuffer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseBuffer = require('./base').Buffer;

  exports.Buffer = NodeBuffer = (function(_super) {

    __extends(NodeBuffer, _super);

    function NodeBuffer() {
      NodeBuffer.__super__.constructor.call(this);
      this._frozen_buf = null;
      this._buffers = [];
      this._limits = [];
      this._sz = 0x1000;
      this._logsz = 12;
      this._i = 0;
      this._tot = 0;
      this._push_new_buffer();
      this._cp = 0;
    }

    NodeBuffer.decode = function(s, enc) {
      return BaseBuffer._decode(NodeBuffer, s, enc);
    };

    NodeBuffer.prototype._nb = function() {
      return this._buffers.length;
    };

    NodeBuffer.prototype._ab = function() {
      return this._buffers[this._nb() - 1];
    };

    NodeBuffer.prototype._lib = function() {
      return this._sz - this._i;
    };

    NodeBuffer.prototype._finish_buffer = function() {
      this._limits.push(this._i);
      return this._i = 0;
    };

    NodeBuffer.prototype._push_buffer = function(b) {
      if (this._buffers.length) this._finish_buffer();
      this._buffers.push(b);
      return b;
    };

    NodeBuffer.prototype._push_new_buffer = function() {
      return this._push_buffer(new Buffer(this._sz));
    };

    NodeBuffer.prototype.push_uint8 = function(b) {
      var buf;
      if (this._no_push) throw new Error("Cannot push anymore into this buffer");
      buf = this._lib() === 0 ? this._push_new_buffer() : this._ab();
      buf[this._i++] = b;
      return this._tot++;
    };

    NodeBuffer.prototype.push_int8 = function(b) {
      return this.push_uint8(b);
    };

    NodeBuffer.prototype.push_uint16 = function(s) {
      var n;
      n = 2;
      if (this._lib() < n) this._push_new_buffer();
      this._ab().writeUint16BE(s, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_uint32 = function(i) {
      var n;
      n = 4;
      if (this._lib() < n) this._push_new_buffer();
      this._ab().writeUint32BE(s, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_int16 = function(s) {
      var n;
      n = 2;
      if (this._lib() < n) this._push_new_buffer();
      this._ab().writeInt16BE(s, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_int32 = function(i) {
      var n;
      n = 4;
      if (this._lib() < n) this._push_new_buffer();
      this._ab().writeInt32BE(s, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_raw_bytes = function(s) {
      return this.push_buffer(new Buffer(s, 'binary'));
    };

    NodeBuffer.prototype.push_buffer = function(b) {
      var diff, n;
      if (b.length > Math.min(0x400, this._sz)) {
        this._push_buffer(b);
        this._push_new_buffer();
      } else {
        n = Math.min(b.length, this._lib());
        b.copy(this._ab(), this._i, 0, n);
        this._i += n;
        this._tot += n;
        if (n < b.length) {
          this._push_new_buffer();
          b.copy(this._ab(), this._i, n, b.length);
          diff = b.length - n;
          this._i += diff;
          this._tot += diff;
        }
      }
      return this;
    };

    NodeBuffer.prototype._freeze = function() {
      var b, i, l, lst;
      if (this._frozen_buf == null) {
        this._finish_buffer();
        lst = (function() {
          var _i, _len, _ref, _results;
          _ref = this._buffers;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            b = _ref[i];
            if ((l = this._limits[i]) === b.length) {
              _results.push(b);
            } else {
              _results.push(b.slice(0, l));
            }
          }
          return _results;
        }).call(this);
        this._buffers = [];
        this._frozen_buf = Buffer.concat(lst, this._tot);
      }
      return this._frozen_buf;
    };

    NodeBuffer.prototype._prepare_encoding = function() {
      return this._freeze();
    };

    NodeBuffer.prototype.base64_encode = function() {
      return this._freeze().toString('base64');
    };

    NodeBuffer.prototype.base16_encode = function() {
      return this._freeze().toString('hex');
    };

    NodeBuffer.prototype.binary_encode = function() {
      return this._freeze().toString('binary');
    };

    NodeBuffer.prototype.ui8a_encode = function() {
      return new Uint8Array(this._freeze());
    };

    NodeBuffer.prototype._get = function(i) {
      return this._frozen_buf[i];
    };

    NodeBuffer.prototype.ui8a_decode = function(v) {
      this._buffers = [new Buffer(v)];
      this._logsz = 0;
      this._tot = this._sz = this._i = v.length;
      this._no_push = true;
      return this;
    };

    NodeBuffer.prototype.read_uint8 = function() {
      return this._get(this._cp++);
    };

    NodeBuffer.prototype.read_uint16 = function() {
      var ret;
      ret = this._frozen_buf.readUint16BE(this._cp);
      this._cp += 2;
      return ret;
    };

    NodeBuffer.prototype.read_uint32 = function() {
      var ret;
      ret = this._frozen_buf.readUint32BE(this._cp);
      this._cp += 4;
      return ret;
    };

    NodeBuffer.prototype.read_int16 = function() {
      var ret;
      ret = this._frozen_buf.readInt16BE(this._cp);
      this._cp += 2;
      return ret;
    };

    NodeBuffer.prototype.read_int32 = function() {
      var ret;
      ret = this._frozen_buf.readInt32BE(this._cp);
      this._cp += 4;
      return ret;
    };

    NodeBuffer.prototype.read_float64 = function() {
      var ret;
      ret = this._frozen_buf.readDoubleBE(this._cp);
      this._cp += 8;
      return ret;
    };

    NodeBuffer.prototype.read_float32 = function() {
      var ret;
      ret = this._frozen_buf.readFloatBE(this._cp);
      this._cp += 4;
      return ret;
    };

    NodeBuffer.prototype.read_byte_array = function(n) {
      var e, ret;
      e = this._cp + n;
      ret = this._frozen_buf.slice(this._cp, e);
      this._cp = e;
      return ret;
    };

    NodeBuffer.prototype.read_utf8_string = function(n) {
      return this.read_byte_array(n).toString('utf8');
    };

    NodeBuffer.utf8_to_ui8a = function(s) {
      return new Buffer(s, 'utf8');
    };

    NodeBuffer.ui8a_to_binary = function(s) {
      return s.toString('binary');
    };

    return NodeBuffer;

  })(BaseBuffer);

}).call(this);
