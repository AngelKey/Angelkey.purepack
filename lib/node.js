// Generated by IcedCoffeeScript 1.6.2a
(function() {
  var NativeBuffer, NodeBuffer, base, twos_compl_inv,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  base = require('./base');

  twos_compl_inv = require('./util').twos_compl_inv;

  NativeBuffer = eval("Buffer");

  exports.PpBuffer = NodeBuffer = (function(_super) {
    __extends(NodeBuffer, _super);

    function NodeBuffer() {
      NodeBuffer.__super__.constructor.call(this);
      this._frozen_buf = null;
      this._sub_buffers = [];
      this._limits = [];
      this._sz = 0x400;
      this._small_buf_sz = 0x100;
      this._logsz = 10;
      this._i = 0;
    }

    NodeBuffer.decode = function(s, enc) {
      if ((enc == null) && NativeBuffer.isBuffer(s)) {
        return (new NodeBuffer).buffer_decode(s);
      } else {
        return base.PpBuffer._decode(NodeBuffer, s, enc);
      }
    };

    NodeBuffer.prototype._nb = function() {
      return this._sub_buffers.length;
    };

    NodeBuffer.prototype._ab = function() {
      return this._sub_buffers[this._nb() - 1];
    };

    NodeBuffer.prototype._lib = function() {
      return 0;
    };

    NodeBuffer.prototype._finish_sub_buffer = function() {
      this._limits.push(this._i);
      return this._i = 0;
    };

    NodeBuffer.prototype._push_sub_buffer = function(b) {
      if (this._sub_buffers.length) {
        this._finish_sub_buffer();
      }
      this._lib = function() {
        return b.length - this._i;
      };
      this._sub_buffers.push(b);
      return b;
    };

    NodeBuffer.prototype._make_room = function() {
      return this._push_sub_buffer(new NativeBuffer(this._sz));
    };

    NodeBuffer.prototype._make_room_for_n_bytes = function(n) {
      if (this._lib() < n) {
        return this._make_room();
      }
    };

    NodeBuffer.prototype.push_uint8 = function(b) {
      var buf;
      if (this._no_push) {
        throw new Error("Cannot push anymore into this buffer");
      }
      buf = this._lib() === 0 ? this._make_room() : this._ab();
      buf[this._i++] = b;
      return this._tot++;
    };

    NodeBuffer.prototype.push_int8 = function(b) {
      return this.push_uint8(b);
    };

    NodeBuffer.prototype.push_uint16 = function(s) {
      var n;
      n = 2;
      this._make_room_for_n_bytes(n);
      this._ab().writeUInt16BE(s, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_uint32 = function(w) {
      var n;
      n = 4;
      this._make_room_for_n_bytes(n);
      this._ab().writeUInt32BE(w, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_int16 = function(s) {
      var n;
      n = 2;
      this._make_room_for_n_bytes(n);
      this._ab().writeInt16BE(s, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_int32 = function(w) {
      var n;
      n = 4;
      this._make_room_for_n_bytes(n);
      this._ab().writeInt32BE(w, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_float64 = function(f) {
      var n;
      n = 8;
      this._make_room_for_n_bytes(n);
      this._ab().writeDoubleBE(f, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_float32 = function(f) {
      var n;
      n = 4;
      this._make_room_for_n_bytes(n);
      this._ab().writeFloatBE(f, this._i);
      this._i += n;
      return this._tot += n;
    };

    NodeBuffer.prototype.push_raw_bytes = function(s) {
      return this.push_buffer(new NativeBuffer(s, 'binary'));
    };

    NodeBuffer.prototype.push_buffer = function(b) {
      var diff, n;
      if (b.length > this._small_buf_sz) {
        this._push_sub_buffer(b);
        this._i = b.length;
        this._tot += b.length;
      } else {
        n = Math.min(b.length, this._lib());
        if (n > 0) {
          b.copy(this._ab(), this._i, 0, n);
          this._i += n;
          this._tot += n;
        }
        if (n < b.length) {
          this._make_room();
          b.copy(this._ab(), this._i, n, b.length);
          diff = b.length - n;
          this._i += diff;
          this._tot += diff;
        }
      }
      return this;
    };

    NodeBuffer.prototype._freeze = function() {
      var b, i, l, lst, _i, _len, _ref;
      if (this._frozen_buf == null) {
        this._finish_sub_buffer();
        lst = [];
        _ref = this._sub_buffers;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          b = _ref[i];
          if ((l = this._limits[i]) === b.length) {
            lst.push(b);
          } else if (l > 0) {
            lst.push(b.slice(0, l));
          }
        }
        this._sub_buffers = [];
        this._frozen_buf = NativeBuffer.concat(lst, this._tot);
      }
      return this._frozen_buf;
    };

    NodeBuffer.prototype._freeze_to = function(b) {
      this._frozen_buf = b;
      this._tot = b.length;
      this._sub_buffers = [];
      return this;
    };

    NodeBuffer.prototype._prepare_encoding = function() {
      return this._freeze();
    };

    NodeBuffer.prototype.base64_encode = function() {
      return this._freeze().toString('base64');
    };

    NodeBuffer.prototype.base16_encode = function() {
      return this._freeze().toString('hex');
    };

    NodeBuffer.prototype.binary_encode = function() {
      return this._freeze().toString('binary');
    };

    NodeBuffer.prototype.ui8a_encode = function() {
      return new Uint8Array(this._freeze());
    };

    NodeBuffer.prototype.buffer_encode = function() {
      return this._freeze();
    };

    NodeBuffer.prototype.base64_decode = function(d) {
      return this._freeze_to(new NativeBuffer(d, 'base64'));
    };

    NodeBuffer.prototype.base16_decode = function(d) {
      return this._freeze_to(new NativeBuffer(d, 'hex'));
    };

    NodeBuffer.prototype.binary_decode = function(d) {
      return this._freeze_to(new NativeBuffer(d, 'binary'));
    };

    NodeBuffer.prototype.ui8a_decode = function(d) {
      return this._freeze_to(new NativeBuffer(d));
    };

    NodeBuffer.prototype.buffer_decode = function(d) {
      return this._freeze_to(d);
    };

    NodeBuffer.prototype._get = function(i) {
      if (i < this._tot) {
        return this._frozen_buf[i];
      } else {
        return 0;
      }
    };

    NodeBuffer.prototype.read_uint8 = function() {
      return this._get(this._cp++);
    };

    NodeBuffer.prototype.read_int8 = function() {
      return twos_compl_inv(this.read_uint8(), 8);
    };

    NodeBuffer.prototype.read_uint16 = function() {
      var ret;
      ret = this._frozen_buf.readUInt16BE(this._cp);
      this._cp += 2;
      return ret;
    };

    NodeBuffer.prototype.read_uint32 = function() {
      var ret;
      ret = this._frozen_buf.readUInt32BE(this._cp);
      this._cp += 4;
      return ret;
    };

    NodeBuffer.prototype.read_int16 = function() {
      var ret;
      ret = this._frozen_buf.readInt16BE(this._cp);
      this._cp += 2;
      return ret;
    };

    NodeBuffer.prototype.read_int32 = function() {
      var ret;
      ret = this._frozen_buf.readInt32BE(this._cp);
      this._cp += 4;
      return ret;
    };

    NodeBuffer.prototype.read_float64 = function() {
      var ret;
      ret = this._frozen_buf.readDoubleBE(this._cp);
      this._cp += 8;
      return ret;
    };

    NodeBuffer.prototype.read_float32 = function() {
      var ret;
      ret = this._frozen_buf.readFloatBE(this._cp);
      this._cp += 4;
      return ret;
    };

    NodeBuffer.prototype.read_byte_array = function(n) {
      var bl, e, ret;
      bl = this.bytes_left();
      if (n > bl) {
        this._e.push("Corruption: asked for " + n + " bytes, but only " + bl + " available");
        n = bl;
      }
      e = this._cp + n;
      ret = this._frozen_buf.slice(this._cp, e);
      this._cp = e;
      return ret;
    };

    NodeBuffer.prototype.read_utf8_string = function(n) {
      return this.read_byte_array(n).toString('utf8');
    };

    NodeBuffer.utf8_to_ui8a = function(s) {
      return new NativeBuffer(s, 'utf8');
    };

    NodeBuffer.ui8a_to_binary = function(s) {
      return s;
    };

    NodeBuffer.to_byte_array = function(b) {
      if (NativeBuffer.isBuffer(b)) {
        return b;
      } else if (base.is_uint8_array(b)) {
        return new NativeBuffer(b);
      } else {
        return null;
      }
    };

    NodeBuffer.type = function() {
      return 'node';
    };

    return NodeBuffer;

  })(base.PpBuffer);

}).call(this);
